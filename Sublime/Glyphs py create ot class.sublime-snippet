<snippet>
<content><![CDATA[
${1:import GlyphsApp
Font = Glyphs.font
}
def create_otclass( classname   = "@default", 
                    classglyphs = [ x.parent.name for x in Font.selectedLayers ], 
                    targetfont  = Font ):
	"""
	Creates an OpenType class in the font.
	Default: class @default with currently selected glyphs in the current font.
	Returns a status message in form of a string.
	"""
	
	# strip '@' from beginning:
	if classname[0] == "@":
		classname = classname[1:]
	
	classCode = " ".join( classglyphs )
	
	if classname in [ c.name for c in targetfont.classes ]:
		targetfont.classes[classname].code = classCode
		return "Updated existing OT class '%s'." % classname
	else:
		newClass = GSClass()
		newClass.name = classname
		newClass.code = classCode
		targetfont.classes.append( newClass )
		return "Created new OT class: '%s'" % classname

$0
]]></content>
<!-- Snippet Name: Glyphs py create ot class -->
<tabTrigger>otclass</tabTrigger>
<!-- E4198030-3DF0-4783-A946-AA926BC6C3C3 -->
</snippet>
